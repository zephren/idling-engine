{"gameData":"{\"id\":0.8905301856805143,\"layout\":\"{\\\"ROOT\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Container\\\"},\\\"isCanvas\\\":true,\\\"props\\\":{\\\"padding\\\":5,\\\"background\\\":\\\"#eee\\\"},\\\"displayName\\\":\\\"Element\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[\\\"_6UlhO8ksm\\\",\\\"ObFocI4z7\\\",\\\"d_Lwn-X35\\\",\\\"NZFZ9t5RS\\\",\\\"Gpnsx4C51\\\",\\\"TDbbX_SCU\\\",\\\"gkm14FJqI\\\",\\\"NAa1TPRHr\\\",\\\"bkPhbHmUL\\\",\\\"2o58HbsxI\\\",\\\"fqq6Dw00x\\\"],\\\"linkedNodes\\\":{}},\\\"_6UlhO8ksm\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Text\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"text\\\":\\\"Start dragging components in (and delete me)\\\",\\\"fontSize\\\":22},\\\"displayName\\\":\\\"Text\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"egzio8Sqd\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Table\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"columnNames\\\":[{\\\"name\\\":\\\"Name\\\",\\\"property\\\":\\\"col1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"Count (Price)\\\",\\\"property\\\":\\\"col2\\\",\\\"type\\\":\\\"textFromFunction\\\"},{\\\"name\\\":\\\"Buy\\\",\\\"property\\\":\\\"col3\\\",\\\"type\\\":\\\"button\\\"}],\\\"itemSource\\\":\\\"tableData\\\",\\\"updateVariable\\\":false,\\\"updateVarible\\\":true},\\\"displayName\\\":\\\"Table\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"TDbbX_SCU\\\"},\\\"d_Lwn-X35\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"AppBar\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"tabs\\\":[{\\\"name\\\":\\\"Tab 1\\\",\\\"path\\\":\\\"tab1\\\",\\\"to\\\":\\\"/tab1\\\",\\\"default\\\":true},{\\\"name\\\":\\\"Tab 2\\\",\\\"path\\\":\\\"tab2\\\",\\\"to\\\":\\\"/tab2\\\",\\\"default\\\":false},{\\\"name\\\":\\\"Tab 3\\\",\\\"path\\\":\\\"tab3\\\",\\\"to\\\":\\\"/tab3\\\",\\\"default\\\":false}],\\\"triggerUpdate\\\":false},\\\"displayName\\\":\\\"AppBar\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"TDbbX_SCU\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"PathContainer\\\"},\\\"isCanvas\\\":true,\\\"props\\\":{\\\"path\\\":\\\"/tab1\\\",\\\"padding\\\":\\\"0px\\\"},\\\"displayName\\\":\\\"Element\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[\\\"egzio8Sqd\\\"],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"gkm14FJqI\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"PathContainer\\\"},\\\"isCanvas\\\":true,\\\"props\\\":{\\\"path\\\":\\\"/tab2\\\",\\\"padding\\\":\\\"0px\\\"},\\\"displayName\\\":\\\"Element\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[\\\"2Ux9F8UtE\\\"],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"NAa1TPRHr\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"PathContainer\\\"},\\\"isCanvas\\\":true,\\\"props\\\":{\\\"path\\\":\\\"/tab3\\\",\\\"padding\\\":\\\"0px\\\"},\\\"displayName\\\":\\\"Element\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[\\\"kEI8tg3ck\\\"],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"2Ux9F8UtE\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Button\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"size\\\":\\\"small\\\",\\\"variant\\\":\\\"contained\\\",\\\"color\\\":\\\"primary\\\",\\\"text\\\":\\\"Click me\\\"},\\\"displayName\\\":\\\"Button\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"gkm14FJqI\\\"},\\\"kEI8tg3ck\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Button\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"size\\\":\\\"small\\\",\\\"variant\\\":\\\"contained\\\",\\\"color\\\":\\\"primary\\\",\\\"text\\\":\\\"Click me\\\"},\\\"displayName\\\":\\\"Button\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"NAa1TPRHr\\\"},\\\"ObFocI4z7\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"VariableText\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"fontSize\\\":15,\\\"dataProperty\\\":\\\"money\\\"},\\\"displayName\\\":\\\"VariableText\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"2o58HbsxI\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Button\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"size\\\":\\\"small\\\",\\\"variant\\\":\\\"contained\\\",\\\"color\\\":\\\"primary\\\",\\\"text\\\":\\\"Init Game Data\\\",\\\"onClickAction\\\":\\\"initialize\\\"},\\\"displayName\\\":\\\"Button\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"NZFZ9t5RS\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Text\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"text\\\":\\\"Hi world\\\",\\\"fontSize\\\":20},\\\"displayName\\\":\\\"Text\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"Gpnsx4C51\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Text\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"text\\\":\\\"Hi world\\\",\\\"fontSize\\\":28},\\\"displayName\\\":\\\"Text\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"8TM8ZWWxG\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"CardTop\\\"},\\\"isCanvas\\\":true,\\\"props\\\":{},\\\"displayName\\\":\\\"Element\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[\\\"ktvij0BpRy\\\",\\\"z-JVZz6_D7\\\"],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"aSFt7SBng\\\"},\\\"ktvij0BpRy\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Text\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"text\\\":\\\"Title\\\",\\\"fontSize\\\":20},\\\"displayName\\\":\\\"Text\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"8TM8ZWWxG\\\"},\\\"z-JVZz6_D7\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Text\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"text\\\":\\\"Subtitle\\\",\\\"fontSize\\\":15},\\\"displayName\\\":\\\"Text\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"8TM8ZWWxG\\\"},\\\"80RUU8NpvC\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"CardBottom\\\"},\\\"isCanvas\\\":true,\\\"props\\\":{},\\\"displayName\\\":\\\"Element\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[\\\"3NQVw_-158\\\"],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"aSFt7SBng\\\"},\\\"3NQVw_-158\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Button\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"size\\\":\\\"small\\\",\\\"variant\\\":\\\"outlined\\\",\\\"color\\\":\\\"primary\\\",\\\"text\\\":\\\"Learn more\\\",\\\"children\\\":\\\"Hi!\\\"},\\\"displayName\\\":\\\"Button\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"80RUU8NpvC\\\"},\\\"bkPhbHmUL\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Button\\\"},\\\"isCanvas\\\":false,\\\"props\\\":{\\\"size\\\":\\\"small\\\",\\\"variant\\\":\\\"contained\\\",\\\"color\\\":\\\"primary\\\",\\\"text\\\":\\\"Click me\\\",\\\"onClickAction\\\":\\\"buyThing\\\"},\\\"displayName\\\":\\\"Button\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"},\\\"fqq6Dw00x\\\":{\\\"type\\\":{\\\"resolvedName\\\":\\\"Container\\\"},\\\"isCanvas\\\":true,\\\"props\\\":{\\\"padding\\\":20},\\\"displayName\\\":\\\"Element\\\",\\\"custom\\\":{},\\\"hidden\\\":false,\\\"nodes\\\":[],\\\"linkedNodes\\\":{},\\\"parent\\\":\\\"ROOT\\\"}}\"}","gameCode":"[{\"name\":\"main\",\"code\":\"//main\\n\\n\\n// You may wish to move each of the following to its own file\\n\\nconst configuration = {};\\nconfiguration.buildings = {\\n  'building1': {\\n    name: 'Building 1',\\n    costFn: (currentAmount) => {\\n      return currentAmount * 10;\\n    },\\n    moneyFn: (amount) => {\\n      return amount * 2;\\n    }\\n  },\\n  'building2': {\\n    name: 'Building 2',\\n    costFn: (currentAmount) => {\\n      return currentAmount * 100;\\n    },\\n    moneyFn: (amount) => {\\n      return amount * 20;\\n    }\\n  },\\n  'building3': {\\n    name: 'Building 3',\\n    costFn: (currentAmount) => {\\n      return currentAmount * 1000;\\n    },\\n    moneyFn: (amount) => {\\n      return amount * 200;\\n    }\\n  }\\n}\\n\\ngame.configure = (settings) => {\\n  // Update any game settings here\\n  // settings.tickInterval = 5000\\n}\\n\\ngame.initialize = () => {\\n  // Update any initial game data here\\n  game.data.money = 0;\\n  game.data.buildings = {};\\n}\\n\\ngame.tick = () => {\\n  // The main function to handle game logic\\n  game.data.money += 10;\\n  \\n  for (const buildingId in game.data.buildings) {\\n    const count = game.data.buildings[buildingId];\\n    const building = configuration.buildings[buildingId];\\n    game.data.money += building.moneyFn(count);\\n  }\\n  \\n  game.update();\\n};\\n\\n// Define actions using game.actions ...\\n// Define conditionals using game.conditionals ...\\n\\ngame.actions.initialize = () => {\\n  game.initialize();\\n}\\n\\ngame.actions.buyThing = (thing) => {\\n  const {buildingId} = thing;\\n  const building = configuration.buildings[buildingId];\\n  \\n  if (!game.data.buildings[buildingId]) {\\n    game.data.buildings[buildingId] = 0;\\n  }\\n  \\n  const count = game.data.buildings[buildingId];\\n  const cost = building.costFn(count);\\n  \\n  if (cost > game.data.money) {\\n    alert('Cannot afford!');\\n    return;\\n  }\\n  \\n  game.data.buildings[buildingId] += 1;\\n  game.data.money -= cost;\\n  game.update();\\n}\\n\\ngame.dataSources.tableData = () => {\\n  const rows = [];\\n  \\n  for (const buildingId in configuration.buildings) {\\n    const building = configuration.buildings[buildingId];\\n    const count = game.data.buildings[buildingId] || 0;\\n    \\n    rows.push({\\n      buildingId,\\n      col1: building.name,\\n      col2: {\\n        data: (item) => {\\n          return `${count} (${building.costFn(count)})`;\\n        }\\n      },\\n      col3: {\\n        text: 'Buy',\\n        onClickAction: 'buyThing'\\n      },\\n    })\\n  }\\n  \\n  return rows;\\n}\"}]"}